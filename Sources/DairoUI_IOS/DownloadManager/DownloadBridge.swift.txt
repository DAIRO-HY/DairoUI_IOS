//
//  DownloadBridge.swift
//  DairoUI_IOS
//
//  Created by zhoulq on 2025/04/16.
//

import Foundation

class DownloadBridge {
    
    /**
     * 最大下载上线
     */
    private let maxDownloadingCount = 5
    
    /**
     * 当前正在下载的的md5对应的下载任务
     */
    nonisolated(unsafe) private static var md5ToBridge = [String: DownloadThread]()
    
    /**
     * 单线程并发锁
     */
    private static let lock = NSLock()

    /**
     * 下载完成回调函数
     */
    private let finishFunc: ((_ error:Error?) -> ())
    
    //  ///控制保存时间间隔
    //  static const SAVE_DOWNLOAD_SIZE_TIMER = 10 * 1000;
    //
    //  ///下载文件信息
    //  DownloadDto dto;
    //
    //  ///下载管理
    //  DownloadManager? _downloadManager;
    //
    //  ///记录最后一次保存进度时间
    //  int lastSaveTime = 0;
    
    /**
     * 下载地址
     */
    private let url: String
    
    /**
     * 文件存储目录
     */
    private let folder: String
    
    /**
     * 当前下载线程
     */
    private var downloadThread: DownloadThread? = nil
    
    init(url: String, folder: String, finishFunc: @escaping ((_ error:Error?) -> ())){
        self.url = url
        self.folder = folder
        self.finishFunc = finishFunc
    }
    
    /**
     * 设置下载进度回调函数
     */
    func setProgressFunc(progressFunc: @escaping DownloadThread.DownloadThreadProgressFuncType) {
        DownloadBridge.lock.lock()
        self.downloadThread?.setProgressFunc(progressFunc: progressFunc)
        DownloadBridge.lock.unlock()
    }
    
    /**
     * 停止下载进度监听
     */
    func stopProgress(){
        DownloadBridge.lock.lock()
        self.downloadThread?.stopProgress()
        DownloadBridge.lock.unlock()
    }
    
    ///开始下载
    func download() {
        
        //获取下载文件的MD5
        let md5 = self.url.md5
        
        //拼接文件名
        let filepath = DownloadBridge.makeFilePath(url: self.url, folder: self.folder)
        if FileManager.default.fileExists(atPath: filepath){ //如果文件已经存在
            self.onSuccess(nil)
            return
        }
        let info = DownloadingInfo(path: filepath + ".downloading", url: self.url)
        let dt = DownloadThread(info){err in
            if err == nil{
                
                //文件重命名
                FileUtil.rename(source: filepath + ".downloading", target: filepath)
            }
            
            
            DownloadBridge.lock.lock()
            
            //下载线程结束之后从正在下载队列中移除
            DownloadBridge.md5ToBridge.removeValue(forKey: md5)
            self.downloadThread = nil
            DownloadBridge.lock.unlock()
            self.onSuccess(err)
        }
        
        DownloadBridge.lock.lock()
        self.downloadThread = dt
        if DownloadBridge.md5ToBridge.contains(where:{$0.key == md5}){ //如果下载线程已经存在
            DownloadBridge.lock.unlock()
            self.onSuccess(MultipleDownloadError())
            return
        }
        
        //添加到正在下载列表
        DownloadBridge.md5ToBridge[md5] = self.downloadThread!
        DownloadBridge.lock.unlock()
        dt.download()
        
        //    if (this._downloadManager != null) {
        //      //任务已经在下载中，无需重复添加
        //      return;
        //    }
        //    this.dto.state = 1;
        //    final info = DownloadingInfo(url: this.dto.url, path: "${this.dto.path}.download");
        //    this._downloadManager = DownloadManager(info: info, onSuccess: this.onSuccess, onError: this.onError, onProgress: this.onProgress);
        //    this._downloadManager!.download();
    }
    
    ///暂停下载
    func pause() {
        self.downloadThread?.cancel()
        //    DownloadDao.setSize(this.dto.id, this.dto.size);
        //    DownloadDao.setProgress(this.dto.id, this.dto.downloadedSize);
        //    this._downloadManager?.pause();
    }
    
    ///下载完成回调函数
    private func onSuccess(_ error:Error?) {
        self.finishFunc(error)
        //    final downloadFile = File("${this.dto.path}.download");
        //    var file = File(this.dto.path);
        //    if (file.existsSync()) {
        //      //文件后缀
        //      final ext = "." + this.dto.path.fileExt;
        //
        //      //文件名前缀
        //      final pre = this.dto.name.substring(0, this.dto.name.length - ext.length -1);
        //
        //      //文件所在目录
        //      final folder = this.dto.path.fileParent;
        //      for (var i = 1; i < 1000000000; i++) {
        //        file = File("$folder/$pre($i)$ext");
        //        if (!file.existsSync()) {
        //          break;
        //        }
        //      }
        //      DownloadDao.setPath(this.dto.id,file.path);
        //    }
        //    downloadFile.renameSync(file.path);
        //
        //    //标记为下载完成
        //    DownloadDao.setState(this.dto.id, 10);
        //    // DownloadDao.setSize(this.dto.id, File(this.dto.path).lengthSync());
        //    this._downloadManager = null;
        //
        //    ///从正在下载的任务列表中将自己移除
        //    DownloadTask.removeDownloading(this);
        //    DownloadTask.start();
        //
        //    //通知刷新页面
        //    EventUtil.post(EventCode.DOWNLOAD_PAGE_RELOAD);
        //    if (this.dto.saveToImageGallery == 0) {
        //      return;
        //    }
        //
        //    //将相片或者视频保存到相册
        //    ImageGallerySaver.saveFile(this.dto.path).then((rs) {
        //      if (rs["isSuccess"]) {
        //        //保存到相册成功
        //      }
        //    });
    }
    
    ///下载完成回调函数
    func onError( error: String) {
        //    if (error == "PAUSE") {
        //      //暂停操作
        //      DownloadDao.setState(this.dto.id, 2);
        //    } else {
        //      DownloadDao.setState(this.dto.id, 3, error);
        //    }
        //    this._downloadManager = null;
        //
        //    ///从正在下载的任务列表中将自己移除
        //    DownloadTask.removeDownloading(this);
        //    DownloadTask.start();
        //
        //    //通知刷新页面
        //    EventUtil.post(EventCode.DOWNLOAD_PROGRESS);
    }
    
    ///下载完成回调函数
    //  func onProgress(int size, int downloadedSize, int speed, int remainder) {
    //    this.dto.size = size;
    //    this.dto.downloadedSize = downloadedSize;
    //    this.dto.msg = "${speed.dataSize}/S 剩余时间 ${remainder.timeFormat}";
    //
    //    //控制保存频率
    //    int now = DateTime.now().millisecondsSinceEpoch;
    //    if (now - this.lastSaveTime > DownloadBridge.SAVE_DOWNLOAD_SIZE_TIMER) {
    //      DownloadDao.setProgress(this.dto.id, downloadedSize);
    //      this.lastSaveTime = now;
    //    }
    //    //通知刷新页面
    //    EventUtil.post(EventCode.DOWNLOAD_PROGRESS);
    //  }
    
    /**
     * 获取已经下载了的文件
     */
    public static func getDownloadedPath(url: String, folder: String) -> String?{
        
        //拼接文件名
        let filepath = makeFilePath(url: url, folder: folder)
        if FileManager.default.fileExists(atPath: filepath){
            return filepath
        }
        return nil
    }
    
    /**
     * 生成文件路径
     */
    private static func makeFilePath(url: String, folder: String) -> String{
        
        //获取下载文件的MD5
        let md5 = url.md5
        
        //拼接文件名
        return folder + "/" + md5
    }
}
/**
 * 下载线程已经存在ERROR
 */
public struct MultipleDownloadError : Error{
}
